statements: NEWLINE* statement (NEWLINE+ expr)* NEWLINE*

statement:  KEYWORD: RETURN expr
            KEYWORD: BREAK
            KEYWORD: CONTINUE
            expr

expr:   KEYWORD: var IDENTIFIER EQ expr
        term((PLUS|MINUS) term)*
        comparison-expr((KEYWORD: AND|OR) comparison-expr)*

comparison-expr:    NOT comparison-expr
                    arithmetic-expr ((EE|LT|GT|LTE|GTE) arithmetic-expr)*

arithmetic-expr: term((PLUS|MINUS) term)*

term:   factor((MUL|DIV) factor)*

factor: (PLUS|MINUS) factor
        power

power:  call(POW factor)*

call:   atom(LPAREN (expr (COMMA expr)*)? RPAREN)?

atom:   INT|FLOAT|STRING|IDENTIFIER
        LPAREN expr RPAREN
        list-expr
        if-expr
        for-expr
        while-expr
        func-def

list-expr:  LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr:    KEYWORD: IF expr KEYWORD: THEN
            (statement if-expr-b|if-expr-c?)
            (NEWLINE statements KEYWORD: END if-expr-b|if-expr-c)

if-expr-b:  KEYWORD: ELIF expr KEYWORD: THEN
            (statement if-expr-b|if-expr-c?)
            (NEWLINE statements KEYWORD: END if-expr-b|if-expr-c)

if-expr-c:  KEYWORD: ELSE
            statement
            (NEWLINE statements KEYWORD: END)

for-expr:   KEYWORD: FOR IDENTIFIER EQ expr KEYWORD: TO expr
            (KEYWORD: STEP expr)? KEYWORD: THEN
            statement
            (NEWLINE statements KEYWORD: END)

while-expr: KEYWORD: WHILE expr KEYWORD: THEN
            statement
            (NEWLINE statements KEYWORD: END)

func-def:   KEYWORD: CREATE IDENTIFIER?
            LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
            (ARROW: expr)
            (NEWLINE statements KEYWORD: END)